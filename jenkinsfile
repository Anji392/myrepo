pipeline {
  agent any

  environment {
    APP_HOST     = "192.168.56.11"   // or host.docker.internal + port forward if you use that
    APP_SSH_PORT = "22"
    APP_USER     = "deploy"
    APP_SSH_CRED = "app-ssh"
    IMAGE_NAME   = "myorg/myapp"
    IMAGE_TAG    = "${env.BUILD_NUMBER}"
    TAR_NAME     = "myapp-${env.BUILD_NUMBER}.tar"
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: "20"))
  }

  stages {
    stage("Sanity") {
      steps {
        sh '''
          set -euxo pipefail
          pwd
          echo "PATH=$PATH"
          which docker
          docker version
          ls -la
        '''
      }
    }

    stage("Checkout") { steps { checkout scm } }

    stage("Build image") {
      steps {
        sh '''
          set -euxo pipefail
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
        '''
      }
    }

    stage("Test") {
      steps {
        sh '''
          set -euxo pipefail
          docker run --rm -e PYTHONPATH=/app ${IMAGE_NAME}:${IMAGE_TAG} pytest -q
        '''
      }
    }

    stage("Package image") {
      steps {
        sh '''
          set -euxo pipefail
          docker save ${IMAGE_NAME}:${IMAGE_TAG} -o ${TAR_NAME}
          ls -lh ${TAR_NAME}
        '''
        archiveArtifacts artifacts: "${TAR_NAME}", fingerprint: true
      }
    }

    stage("Connectivity check") {
      steps {
        sshagent (credentials: [env.APP_SSH_CRED]) {
          sh '''
            set -euxo pipefail
            ssh -o StrictHostKeyChecking=no -p ${APP_SSH_PORT} ${APP_USER}@${APP_HOST} \
              "hostname && id && docker ps --format 'table {{.Names}}\t{{.Image}}'"
          '''
        }
      }
    }

    stage("Transfer & Deploy") {
      steps {
        sshagent (credentials: [env.APP_SSH_CRED]) {
          sh '''
            set -euxo pipefail
            scp -P ${APP_SSH_PORT} -o StrictHostKeyChecking=no ${TAR_NAME} ${APP_USER}@${APP_HOST}:/tmp/${TAR_NAME}
            ssh -o StrictHostKeyChecking=no -p ${APP_SSH_PORT} ${APP_USER}@${APP_HOST} '
              set -euxo pipefail
              docker load -i /tmp/${TAR_NAME}
              docker rm -f myapp || true
              docker run -d --name myapp -p 5000:5000 ${IMAGE_NAME}:${IMAGE_TAG}
            '
          '''
        }
      }
    }
  }

  post {
    always { sh "docker image prune -f || true" }
  }
}
