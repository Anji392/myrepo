pipeline {
  agent any
  options { timestamps() }

  environment {
    APP_HOST     = "192.168.56.11"   // or host.docker.internal with an SSH port forward 2222
    APP_SSH_PORT = "22"
    APP_USER     = "deploy"
    APP_SSH_CRED = "app-ssh"
    IMAGE_NAME   = "myorg/myapp"
    IMAGE_TAG    = "${env.BUILD_NUMBER}"
    TAR_NAME     = "myapp-${env.BUILD_NUMBER}.tar"
  }

  stages {
    stage("Sanity") {
      steps {
        sh '''#!/usr/bin/env bash
set -euo pipefail
which docker
docker version
'''
      }
    }

    stage("Checkout") { steps { checkout scm } }

    stage("Build image") {
      steps {
        sh '''#!/usr/bin/env bash
set -euo pipefail
docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
'''
      }
    }

    stage("Test") {
      steps {
        sh '''#!/usr/bin/env bash
set -euo pipefail
docker run --rm -e PYTHONPATH=/app ${IMAGE_NAME}:${IMAGE_TAG} pytest -q
'''
      }
    }

    stage("Package") {
      steps {
        sh '''#!/usr/bin/env bash
set -euo pipefail
docker save ${IMAGE_NAME}:${IMAGE_TAG} -o ${TAR_NAME}
ls -lh ${TAR_NAME}
'''
        archiveArtifacts artifacts: "${TAR_NAME}", fingerprint: true
      }
    }

    stage("Connectivity check") {
      steps {
        sshagent (credentials: [env.APP_SSH_CRED]) {
          sh '''#!/usr/bin/env bash
set -euo pipefail
ssh -o StrictHostKeyChecking=no -p ${APP_SSH_PORT} ${APP_USER}@${APP_HOST} "hostname && id && docker ps -a | head -5"
'''
        }
      }
    }

    stage("Transfer & Deploy") {
      steps {
        sshagent (credentials: [env.APP_SSH_CRED]) {
          sh '''#!/usr/bin/env bash
set -euo pipefail
scp -P ${APP_SSH_PORT} -o StrictHostKeyChecking=no ${TAR_NAME} ${APP_USER}@${APP_HOST}:/tmp/${TAR_NAME}
ssh -o StrictHostKeyChecking=no -p ${APP_SSH_PORT} ${APP_USER}@${APP_HOST} '
  set -euo pipefail
  docker load -i /tmp/${TAR_NAME}
  docker rm -f myapp || true
  docker run -d --name myapp -p 5000:5000 ${IMAGE_NAME}:${IMAGE_TAG}
'
'''
        }
      }
    }
  }

  post {
    always { sh 'docker image prune -f || true' }
  }
}
